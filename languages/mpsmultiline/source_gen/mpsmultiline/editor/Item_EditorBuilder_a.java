package mpsmultiline.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import de.slisson.mps.editor.multiline.cellProviders.MultilineCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class Item_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Item_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createMultiline_1();
  }

  private EditorCell createMultiline_0(EditorContext editorContext, SNode node) {
    getCellFactory().pushCellContext();
    try {
      SProperty property = PROPS.description$wns3;
      getCellFactory().setPropertyInfo(new SPropertyInfo(node, property));
      CellProviderWithRole provider = new MultilineCellProvider(node, property, editorContext);
      provider.setAllowsEmptyTarget(false);
      provider.setNoTargetText("<no description>");
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      setCellContext(editorCell);

      editorCell.setCellId("property_description");
      editorCell.setBig(true);
      setCellContext(editorCell);
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      if (attributeConcept != null) {
        return getUpdateSession().updateAttributeCell(provider.getRoleAttributeKind(), editorCell, attributeConcept);
      } else
      return editorCell;
    } finally {
      getCellFactory().popCellContext();
    }
  }
  private EditorCell createMultiline_1() {
    return createMultiline_0(getEditorContext(), myNode);
  }

  private static final class PROPS {
    /*package*/ static final SProperty description$wns3 = MetaAdapterFactory.getProperty(0x5b59603fc0174207L, 0x998bd2ca8524a168L, 0x26ce7c0da17d4cc5L, 0x26ce7c0da17d4cc6L, "description");
  }
}
